{"version":3,"sources":["images/heroBox.svg","images/noResults.svg","pages/Home.js","pages/Browse.js","components/Map.js","pages/MyMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","div","animate","translateX","opacity","transition","ease","duration","h3","translateY","delay","button","onClick","window","location","type","alt","src","bannerImage","width","data","require","Browse","useState","packages","setPackages","filter","setFilter","hasSearch","setHasSearch","placeholder","onChange","event","preventDefault","target","value","console","log","JSON","parse","stringify","filteredPackages","ABR","item","MainEntity","BusinessAddress","AddressDetails","Postcode","length","map","index","key","NonIndividualName","NonIndividualNameText","toLowerCase","noResultsImage","Geocode","setApiKey","enableDebug","Map","props","getCity","addressArray","i","types","long_name","getArea","j","getState","setState","name","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","address_components","city","area","state","latValue","geometry","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","this","nextProps","nextState","AsyncMap","withScriptjs","withGoogleMap","google","defaultZoom","zoom","defaultCenter","style","height","paddingLeft","marginTop","marginBottom","componentRestrictions","country","draggable","onDragEnd","position","undefined","googleMapURL","loadingElement","containerElement","mapElement","React","Component","MyMap","App","to","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5fe22a85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heroBox.b0bf765e.svg\";","module.exports = __webpack_public_path__ + \"static/media/noResults.268d51d8.svg\";","import React from 'react';\r\nimport '../App.css';\r\nimport bannerImage from '../images/heroBox.svg';\r\nimport { motion } from \"framer-motion\"\r\n\r\nfunction Home() {\r\n  const handleClick = () => {\r\n    window.location = '/browse'\r\n  }\r\n  return (\r\n    <div className=\"homeWrapper\">\r\n      <div className=\"banner\">\r\n        <motion.div animate={{ translateX: [-150, 0], opacity: [0, 1] }} transition={{ ease: \"easeOut\", duration: 2 }} className=\"bannerLeft\">\r\n            <div className=\"leftCTA\">\r\n                <h1>Hackatouille</h1>\r\n                <motion.h3 animate={{ translateY: [75, 0], opacity: [0, 1] }} transition={{ ease: \"easeOut\", delay: 2, duration: 1 }}>\r\n                    The central platform for selling and delivering care packages sourced from your local businesses\r\n                </motion.h3>\r\n                <motion.button onClick={handleClick} animate={{ translateY: [75, 0], opacity: [0, 1] }} transition={{ ease: \"easeOut\", delay: 2.5, duration: 1 }} type=\"button\" className=\"primaryButton\">\r\n                    GET STARTED\r\n                </motion.button>\r\n            </div>\r\n        </motion.div>\r\n        <motion.div animate={{ translateX: [150, 0], opacity: [0, 1] }} transition={{ ease: \"easeOut\", duration: 2 }} className=\"bannerRight\">\r\n            <img alt=\"Woman with gift box\" src={bannerImage} width=\"500px\"/>\r\n        </motion.div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, {useState, useEffect} from 'react';\r\nimport noResultsImage from '../images/noResults.svg';\r\nimport '../App.css';\r\n\r\nlet data = require('../mock/business_abr.json');\r\n\r\nfunction Browse() {\r\n  const [packages, setPackages] = useState([]);\r\n  const [filter, setFilter] = useState([]);\r\n  const [hasSearch, setHasSearch] = useState(false);\r\n\r\n  const handleInput = (event) => {\r\n    event.preventDefault();\r\n    setFilter(event.target.value);\r\n    //console.log(event.target.value);\r\n    \r\n  }\r\n\r\n  const handleSearch = (event) => {\r\n    event.preventDefault();\r\n    \r\n    console.log(JSON.parse(JSON.stringify(data)));\r\n    let filteredPackages = data.ABR.filter(item => item.MainEntity.BusinessAddress.AddressDetails.Postcode === filter);\r\n    setPackages(filteredPackages)\r\n    setHasSearch(true)\r\n    //console.log(\"filteredPackages\", filteredPackages)\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className=\"contentWrapper\">\r\n      <div className=\"jumbotron\">\r\n        <h1>Browse carepackages</h1>\r\n        <h3>Browse carepackes from your local businesses by searching for your postcode</h3>\r\n        <div className=\"alert\"><strong>Note: </strong>The data here is static for the sake of the hackathon. Try search for 2000, 2141, 2295, 3123, 2010, 2800, or any other postcode in the mock/business_abr.json file.</div>\r\n        <input className=\"search\" placeholder=\"Search for your postcode\" onChange={handleInput}></input>\r\n        <button className=\"searchButton\" onClick={handleSearch}>Search</button>\r\n      </div>\r\n      { \r\n        hasSearch  ? (packages.length > 0 ? \r\n          <div className=\"cardWrapper\">\r\n            { \r\n              packages.map(\r\n                (item, index) => ( \r\n                    <div className=\"card\" key={index}>\r\n                      <h4 className=\"cardTitle\">{item.MainEntity.NonIndividualName.NonIndividualNameText.toLowerCase()} carepackage</h4>\r\n                      <p className=\"cardDescription\">\r\n                        <ul>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                        </ul>\r\n                      </p>\r\n                    </div>\r\n                )\r\n              )\r\n            }\r\n          </div> : \r\n        <div className=\"noResults\">\r\n          <h4>No results found</h4>\r\n          <img alt=\"Landscape\" src={noResultsImage} width=\"250px\"/>\r\n        </div>\r\n         ) : ''\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Browse;\r\n","import React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\n\r\nGeocode.setApiKey(\"AIzaSyDh43BSnK8KiM4Ed0kaaVqTiWr2HkmBjhI\");\r\nGeocode.enableDebug();\r\n\r\nclass Map extends React.Component{\r\n  constructor( props ){\r\n    super( props );\r\n    this.state = {\r\n     address: '',\r\n     city: '',\r\n     area: '',\r\n     state: '',\r\n     mapPosition: {\r\n      lat: this.props.center.lat,\r\n      lng: this.props.center.lng\r\n     },\r\n     markerPosition: {\r\n      lat: this.props.center.lat,\r\n      lng: this.props.center.lng\r\n  }\r\n    }\r\n   }\r\n  /**\r\n    * Get the current address from the default map position and set those values in the state\r\n    */\r\n   componentDidMount() {\r\n    Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n     response => {\r\n      const address = response.results[0].formatted_address,\r\n       addressArray =  response.results[0].address_components,\r\n       city = this.getCity( addressArray ),\r\n       area = this.getArea( addressArray ),\r\n       state = this.getState( addressArray );\r\n    \r\n      console.log( 'city', city, area, state );\r\n    \r\n      this.setState( {\r\n       address: ( address ) ? address : '',\r\n       area: ( area ) ? area : '',\r\n       city: ( city ) ? city : '',\r\n       state: ( state ) ? state : '',\r\n      } )\r\n     },\r\n     error => {\r\n      console.error(error);\r\n     }\r\n    );\r\n   };\r\n  /**\r\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n    *\r\n    * @param nextProps\r\n    * @param nextState\r\n    * @return {boolean}\r\n    */\r\n   shouldComponentUpdate( nextProps, nextState ){\r\n    if (\r\n     this.state.markerPosition.lat !== this.props.center.lat ||\r\n     this.state.address !== nextState.address ||\r\n     this.state.city !== nextState.city ||\r\n     this.state.area !== nextState.area ||\r\n     this.state.state !== nextState.state\r\n    ) {\r\n     return true\r\n    } else if ( this.props.center.lat === nextProps.center.lat ){\r\n     return false\r\n    }\r\n   }\r\n  /**\r\n    * Get the city and set the city input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    */\r\n   getCity = ( addressArray ) => {\r\n    let city = '';\r\n    for( let i = 0; i < addressArray.length; i++ ) {\r\n     if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n      city = addressArray[ i ].long_name;\r\n      return city;\r\n     }\r\n    }\r\n   };\r\n  /**\r\n    * Get the area and set the area input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    */\r\n   getArea = ( addressArray ) => {\r\n    let area = '';\r\n    for( let i = 0; i < addressArray.length; i++ ) {\r\n     if ( addressArray[ i ].types[0]  ) {\r\n      for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n       if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n        area = addressArray[ i ].long_name;\r\n        return area;\r\n       }\r\n      }\r\n     }\r\n    }\r\n   };\r\n  /**\r\n    * Get the address and set the address input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    */\r\n   getState = ( addressArray ) => {\r\n    let state = '';\r\n    for( let i = 0; i < addressArray.length; i++ ) {\r\n     for( let i = 0; i < addressArray.length; i++ ) {\r\n      if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n       state = addressArray[ i ].long_name;\r\n       return state;\r\n      }\r\n     }\r\n    }\r\n   };\r\n  /**\r\n    * And function for city,state and address input\r\n    * @param event\r\n    */\r\n   onChange = ( event ) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n   };\r\n  /**\r\n    * This Event triggers when the marker window is closed\r\n    *\r\n    * @param event\r\n    */\r\n   onInfoWindowClose = ( event ) => {\r\n  };\r\n  /**\r\n    * When the user types an address in the search box\r\n    * @param place\r\n    */\r\n   onPlaceSelected = ( place ) => {\r\n  const address = place.formatted_address,\r\n     addressArray =  place.address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray ),\r\n     latValue = place.geometry.location.lat(),\r\n     lngValue = place.geometry.location.lng();\r\n  // Set these values in the state.\r\n    this.setState({\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : '',\r\n     markerPosition: {\r\n      lat: latValue,\r\n      lng: lngValue\r\n     },\r\n     mapPosition: {\r\n      lat: latValue,\r\n      lng: lngValue\r\n     },\r\n    })\r\n   };\r\n  /**\r\n    * When the marker is dragged you get the lat and long using the functions available from event object.\r\n    * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n    * And then set those values in the state.\r\n    *\r\n    * @param event\r\n    */\r\n   onMarkerDragEnd = ( event ) => {\r\n    console.log( 'event', event );\r\n    let newLat = event.latLng.lat(),\r\n     newLng = event.latLng.lng(),\r\n     addressArray = [];\r\n  Geocode.fromLatLng( newLat , newLng ).then(\r\n     response => {\r\n      const address = response.results[0].formatted_address,\r\n       addressArray =  response.results[0].address_components,\r\n       city = this.getCity( addressArray ),\r\n       area = this.getArea( addressArray ),\r\n       state = this.getState( addressArray );\r\n  this.setState( {\r\n       address: ( address ) ? address : '',\r\n       area: ( area ) ? area : '',\r\n       city: ( city ) ? city : '',\r\n       state: ( state ) ? state : ''\r\n      } )\r\n     },\r\n     error => {\r\n      console.error(error);\r\n     }\r\n    );\r\n   };\r\n  render(){\r\n  const AsyncMap = withScriptjs(\r\n     withGoogleMap(\r\n      props => (\r\n       <GoogleMap google={this.props.google}\r\n        defaultZoom={this.props.zoom}\r\n        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n       >\r\n        {/* For Auto complete Search Box */}\r\n        <Autocomplete\r\n         style={{\r\n          width: '100%',\r\n          height: '40px',\r\n          paddingLeft: '16px',\r\n          marginTop: '2px',\r\n          marginBottom: '100px'\r\n         }}\r\n         onPlaceSelected={ this.onPlaceSelected }\r\n         types={['(regions)']}\r\n         componentRestrictions={{country: \"au\"}}\r\n        />\r\n  {/*Marker*/}\r\n        <Marker google={this.props.google}\r\n         name={'Dolores park'}\r\n            draggable={true}\r\n            onDragEnd={ this.onMarkerDragEnd }\r\n               position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n        />\r\n        <Marker />\r\n  {/* InfoWindow on top of marker */}\r\n        {/* <InfoWindow\r\n         onClose={this.onInfoWindowClose}\r\n         position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n        >\r\n         <div>\r\n          <span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n         </div>\r\n        </InfoWindow> */}\r\n  </GoogleMap>\r\n  )\r\n     )\r\n    );\r\n  let map;\r\n    if( this.props.center.lat !== undefined ) {\r\n     map = <div>\r\n       <div>\r\n       <div className=\"alert\"><strong>Note: </strong>This functionality is to locate local businesses around your chosen postcode. Currently there is no live data and this functionality will be embedded within the browse page</div>\r\n       </div>\r\n       <AsyncMap\r\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDh43BSnK8KiM4Ed0kaaVqTiWr2HkmBjhI&libraries=places\"\r\n        loadingElement={\r\n         <div style={{ height: `100%` }} />\r\n        }\r\n        containerElement={\r\n         <div style={{ height: this.props.height }} />\r\n        }\r\n        mapElement={\r\n         <div style={{ height: `100%` }} />\r\n        }\r\n       />\r\n      </div>\r\n  } else {\r\n     map = <div style={{height: this.props.height}} />\r\n    }\r\n    return( map )\r\n   }\r\n  }\r\n  \r\nexport default Map","import React, { Component } from 'react';\r\nimport Map from '../components/Map';\r\n\r\nclass MyMap extends Component {\r\n  render() {\r\n    return(\r\n        <div>\r\n        <Map\r\n     google={this.props.google}\r\n     center={{lat: -33.865143, lng: 151.209900}}\r\n     height='300px'\r\n     width='30px'\r\n     zoom={15}\r\n    />\r\n    </div>\r\n      )\r\n  }\r\n}\r\nexport default MyMap;","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom';\r\nimport Home from './pages/Home.js'\r\nimport Browse from './pages/Browse.js'\r\nimport MyMap from './pages/MyMap.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <div className=\"pageWrapper\">\r\n          <header>\r\n            <nav className=\"navbar\">\r\n              <span>\r\n                <Link to=\"/\"><p>Hackatouille</p></Link>\r\n              </span>\r\n              <ul>\r\n                <li>\r\n                  <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                  <Link to=\"/browse\">Browse</Link>\r\n                </li>\r\n                <li>\r\n                  <Link to=\"/mymap\">MyMap</Link>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </header>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/browse\">\r\n              <Browse />\r\n            </Route>\r\n            <Route path=\"/mymap\">\r\n              <MyMap />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}