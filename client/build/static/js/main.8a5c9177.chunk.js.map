{"version":3,"sources":["images/heroBox.svg","images/noResults.svg","pages/Home.js","pages/Browse.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","div","animate","translateX","opacity","transition","ease","duration","h3","translateY","delay","button","onClick","window","location","type","alt","src","bannerImage","width","data","require","Browse","useState","packages","setPackages","filter","setFilter","hasSearch","setHasSearch","placeholder","onChange","event","preventDefault","target","value","console","log","JSON","parse","stringify","filteredPackages","ABR","item","MainEntity","BusinessAddress","AddressDetails","Postcode","length","map","index","key","NonIndividualName","NonIndividualNameText","toLowerCase","noResultsImage","App","to","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,g7qCC+B5BC,MA1Bf,WAIE,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,UACb,kBAAC,IAAOC,IAAR,CAAYC,QAAS,CAAEC,WAAY,EAAE,IAAK,GAAIC,QAAS,CAAC,EAAG,IAAMC,WAAY,CAAEC,KAAM,UAAWC,SAAU,GAAKP,UAAU,cACrH,yBAAKA,UAAU,WACX,4CACA,kBAAC,IAAOQ,GAAR,CAAWN,QAAS,CAAEO,WAAY,CAAC,GAAI,GAAIL,QAAS,CAAC,EAAG,IAAMC,WAAY,CAAEC,KAAM,UAAWI,MAAO,EAAGH,SAAU,IAAjH,oGAGA,kBAAC,IAAOI,OAAR,CAAeC,QAZT,WAClBC,OAAOC,SAAW,WAW+BZ,QAAS,CAAEO,WAAY,CAAC,GAAI,GAAIL,QAAS,CAAC,EAAG,IAAMC,WAAY,CAAEC,KAAM,UAAWI,MAAO,IAAKH,SAAU,GAAKQ,KAAK,SAASf,UAAU,iBAA1K,iBAKR,kBAAC,IAAOC,IAAR,CAAYC,QAAS,CAAEC,WAAY,CAAC,IAAK,GAAIC,QAAS,CAAC,EAAG,IAAMC,WAAY,CAAEC,KAAM,UAAWC,SAAU,GAAKP,UAAU,eACpH,yBAAKgB,IAAI,sBAAsBC,IAAKC,IAAaC,MAAM,c,yBCpB/DC,EAAOC,EAAQ,IAmEJC,MAjEf,WAAmB,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAEYF,mBAAS,IAFrB,mBAETG,EAFS,KAEDC,EAFC,OAGkBJ,oBAAS,GAH3B,mBAGTK,EAHS,KAGEC,EAHF,KAuBhB,OACE,yBAAK7B,UAAU,kBACb,yBAAKA,UAAU,aACb,mDACA,2GACA,yBAAKA,UAAU,SAAQ,0CAAvB,uKACA,2BAAOA,UAAU,SAAS8B,YAAY,2BAA2BC,SAxBnD,SAACC,GACnBA,EAAMC,iBACNN,EAAUK,EAAME,OAAOC,UAuBnB,4BAAQnC,UAAU,eAAeY,QAlBlB,SAACoB,GACpBA,EAAMC,iBAENG,QAAQC,IAAIC,KAAKC,MAAMD,KAAKE,UAAUpB,KACtC,IAAIqB,EAAmBrB,EAAKsB,IAAIhB,QAAO,SAAAiB,GAAI,OAAIA,EAAKC,WAAWC,gBAAgBC,eAAeC,WAAarB,KAC3GD,EAAYgB,GACZZ,GAAa,KAYT,WAGAD,EAAcJ,EAASwB,OAAS,EAC9B,yBAAKhD,UAAU,eAEXwB,EAASyB,KACP,SAACN,EAAMO,GAAP,OACI,yBAAKlD,UAAU,OAAOmD,IAAKD,GACzB,wBAAIlD,UAAU,aAAa2C,EAAKC,WAAWQ,kBAAkBC,sBAAsBC,cAAnF,gBACA,uBAAGtD,UAAU,mBACX,4BACE,2CACA,2CACA,2CACA,2CACA,2CACA,kDAQlB,yBAAKA,UAAU,aACb,gDACA,yBAAKgB,IAAI,YAAYC,IAAKsC,IAAgBpC,MAAM,WAE7C,KCpBEqC,MAlCf,WACE,OACE,yBAAKxD,UAAU,OACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,eACb,gCACE,yBAAKA,UAAU,UACb,8BACE,kBAAC,IAAD,CAAMyD,GAAG,KAAI,6CAEf,4BACE,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,cAKR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,YCxBMC,QACW,cAA7B/C,OAAOC,SAAS+C,UAEe,UAA7BhD,OAAOC,SAAS+C,UAEhBhD,OAAOC,SAAS+C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.8a5c9177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heroBox.b0bf765e.svg\";","module.exports = __webpack_public_path__ + \"static/media/noResults.268d51d8.svg\";","import React from 'react';\r\nimport '../App.css';\r\nimport bannerImage from '../images/heroBox.svg';\r\nimport { motion } from \"framer-motion\"\r\n\r\nfunction Home() {\r\n  const handleClick = () => {\r\n    window.location = '/browse'\r\n  }\r\n  return (\r\n    <div className=\"homeWrapper\">\r\n      <div className=\"banner\">\r\n        <motion.div animate={{ translateX: [-150, 0], opacity: [0, 1] }} transition={{ ease: \"easeOut\", duration: 2 }} className=\"bannerLeft\">\r\n            <div className=\"leftCTA\">\r\n                <h1>Hackatouille</h1>\r\n                <motion.h3 animate={{ translateY: [75, 0], opacity: [0, 1] }} transition={{ ease: \"easeOut\", delay: 2, duration: 1 }}>\r\n                    The central platform for selling and delivering care packages sourced from your local businesses\r\n                </motion.h3>\r\n                <motion.button onClick={handleClick} animate={{ translateY: [75, 0], opacity: [0, 1] }} transition={{ ease: \"easeOut\", delay: 2.5, duration: 1 }} type=\"button\" className=\"primaryButton\">\r\n                    GET STARTED\r\n                </motion.button>\r\n            </div>\r\n        </motion.div>\r\n        <motion.div animate={{ translateX: [150, 0], opacity: [0, 1] }} transition={{ ease: \"easeOut\", duration: 2 }} className=\"bannerRight\">\r\n            <img alt=\"Woman with gift box\" src={bannerImage} width=\"500px\"/>\r\n        </motion.div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, {useState, useEffect} from 'react';\r\nimport noResultsImage from '../images/noResults.svg';\r\nimport '../App.css';\r\n\r\nlet data = require('../mock/business_abr.json');\r\n\r\nfunction Browse() {\r\n  const [packages, setPackages] = useState([]);\r\n  const [filter, setFilter] = useState([]);\r\n  const [hasSearch, setHasSearch] = useState(false);\r\n\r\n  const handleInput = (event) => {\r\n    event.preventDefault();\r\n    setFilter(event.target.value);\r\n    //console.log(event.target.value);\r\n    \r\n  }\r\n\r\n  const handleSearch = (event) => {\r\n    event.preventDefault();\r\n    \r\n    console.log(JSON.parse(JSON.stringify(data)));\r\n    let filteredPackages = data.ABR.filter(item => item.MainEntity.BusinessAddress.AddressDetails.Postcode === filter);\r\n    setPackages(filteredPackages)\r\n    setHasSearch(true)\r\n    //console.log(\"filteredPackages\", filteredPackages)\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className=\"contentWrapper\">\r\n      <div className=\"jumbotron\">\r\n        <h1>Browse carepackages</h1>\r\n        <h3>Browse carepackes from your local businesses by searching for your postcode</h3>\r\n        <div className=\"alert\"><strong>Note: </strong>The data here is static for the sake of the hackathon. Try search for 2000, 2141, 2295, 3123, 2010, 2800, or any other postcode in the mock/business_abr.json file.</div>\r\n        <input className=\"search\" placeholder=\"Search for your postcode\" onChange={handleInput}></input>\r\n        <button className=\"searchButton\" onClick={handleSearch}>Search</button>\r\n      </div>\r\n      { \r\n        hasSearch  ? (packages.length > 0 ? \r\n          <div className=\"cardWrapper\">\r\n            { \r\n              packages.map(\r\n                (item, index) => ( \r\n                    <div className=\"card\" key={index}>\r\n                      <h4 className=\"cardTitle\">{item.MainEntity.NonIndividualName.NonIndividualNameText.toLowerCase()} carepackage</h4>\r\n                      <p className=\"cardDescription\">\r\n                        <ul>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                          <li>Lorem Ipsum</li>\r\n                        </ul>\r\n                      </p>\r\n                    </div>\r\n                )\r\n              )\r\n            }\r\n          </div> : \r\n        <div className=\"noResults\">\r\n          <h4>No results found</h4>\r\n          <img alt=\"Landscape\" src={noResultsImage} width=\"250px\"/>\r\n        </div>\r\n         ) : ''\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Browse;\r\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport Home from './pages/Home.js'\nimport Browse from './pages/Browse.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"pageWrapper\">\n          <header>\n            <nav className=\"navbar\">\n              <span>\n                <Link to=\"/\"><p>Hackatouille</p></Link>\n              </span>\n              <ul>\n                <li>\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                  <Link to=\"/browse\">Browse</Link>\n                </li>\n              </ul>\n            </nav>\n          </header>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/browse\">\n              <Browse />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}